{
  "posts": [{
    "slug": "apple-iphone6-and-watch",
    "title": "Apple's iPhone 6 and Watch",
    "description": "In this post, Chris shares his reaction to Apple's announcement of the iPhone 6, iPhone 6+, and Apple Watch.",
    "createdAt": "2014-10-12T00:00:00.000Z",
    "lastUpdatedAt": "2014-10-12T00:00:00.000Z",
    "author": "Chris Plowman",
    "tags": "gear reviews, general",
    "image": null,
    "body": "<p>I have to say that the keynotes always give me a touch of sadness now that Steve has passed.  He had a remarkable way of making you excited about the products and clearly showing you that this is something that you NEED.  Hell, your life has been incomplete until now and you, poor fool, didn’t even realize it.  But Steve did, oh yes, oh yes, he did.  Steve ventured into the vast depths of technical what-will-be and emerged with a new gem just for you.  The Steve Jobs’ reality distortion field was never properly studied, but I have to believe that he emitted an electro-magnetic pulse that drove your brain waves in whatever manner he wanted.  Don’t get me wrong, Tim Cook seems a smart and capable guy, he’s just not a part of the X-Men.</p>\n<p>Nevertheless, Mr. Cook still puts on a decent show, and definitely is following the cues of his predecessor.  The casual air and outfit, the conversational tone, even the phrases and pacing all ring of Jobs, as if to say, “we’re still on Steve’s plan, we promise.”  In some ways it’s a nice homage to a revolutionary, but I also think it’s time to move on.  Tim needs his own schtick and I think it’s an important symbol to step out of the master’s shadow and declare, “I got this now and it’s different, but still awesome.”</p>\n<p>##iPhone 6 and the “Bigger than Bigger”\nSeriously, “Bigger Than Bigger”?  That’s the best marketing they could come up with?!  Did Samsung write this for them?  Worst. Slogan. Ever.  That combined with some of the lamest ads I’ve ever seen come out of Apple just about had me wondering if they are just throwing in the towel or allowing the marketing campaign to be run by a 6-year old.  Holy failed concept Batman!  Must have blown the budget on the watch…</p>\n<p>Nevertheless, they did bother to put out a couple new phones so I guess I should go ahead and tell you what I thought about them.  Eh, not bad.  Some pretty impressive performance boosts and the ability to do Apple Pay was a pretty compelling feature for me.  The camera had some really nice improvements as well, including improvements to image quality, autofocus, and the ability to shoot 1080p video at 60fps and slow-mo up to 240fps at 720p.  Time lapse seemed like a weird feature to have on a phone camera to me though.  Who uses that?  The update to AC for wireless was pretty expected, but a welcome update.  Of course they are bigger, which to me is a turn off.  I really preferred my iPhone 4 size to my 5, and now the 6 is even bigger.  The 6 Plus is one of those god-awful phablets that look like you’re holding a brick up to your head.  I’m obviously the minority here, judging by the insane pre-sale on the iPhone 6 as well as the slew of giant Android phones you see, but I like something small and portable that’s simple to use with one hand.  When I want something bigger, I go to a tablet or a computer.  I feel like the larger phones make it more difficult to use (and clearly Apple agrees or they wouldn’t have added new software features to help you reach everything) and it just doesn’t feel as comfortable in the pocket.</p>\n<p>The worst part for me, as a long time Apple enthusiast, is that I feel the differentiation between the iPhone and Android phones just shrunk a little more.  I’d be lying if I didn’t tell you I was considering a switch.  I waited in those insane lines when the original iPhone came out and I’ve had one ever since, but I’m less and less excited about their offerings.  If I jump to Android there are a lot more size and resolution options.  I do have an Android tablet along with an iPad though, and so far I still prefer Apple.  Apple’s platform just feels a little more polished and user-friendly to me, but just a touch.  Ultimately, as a developer I will always have devices on both platforms (heck, I’ll even get a Windows phone if and when I find some real life users).  But, the battle for what phone will be in my pocket under a paid service plan is heating up.</p>\n<p>As for the iPhone 6, I was really looking forward to upgrading my 5, but now I think I’ll hold onto it a bit longer, at least until I’ve had a chance to hold a 6 in my hand and in my pocket to see how big of a deal that extra size makes.  I love some of the extra features in the 6 plus, especially with the camera, but I’m not quite ready to carry a purse…</p>\n<p>##Apple Watch – Too Much, Too Little, Or Just Right?\nApple recently announced it’’s new watch, but with prices starting at a fairly steep $349, is it worth it?  I have been watching the wearable market with a passing interest for a little while.  While I think the general idea is kind of cool, I’’m still on the fence for whether the devices provide a compelling enough use case for the money and if it’’s something I will really use or end up putting in a drawer to gather dust until I finally get around to eBay’’ing it in a couple years…</p>\n<p>For me, the neatest aspect of the new device was the input.  The inclusion of the digital crown for control was brilliant.  It’’s the kind of idea that is so immediately grasped that it seems obvious, but clearly it wasn’t to the other wearable makers.  That addresses one of my personal key gripes about smart watches - I can’’t see what I’’m interacting with!  The pressure sensitivity on the watch face also seems like a very useful way to add an alternate gesture, though that’’s one that I’’ll have to try before I can give it a definitive thumbs up or down.  Nevertheless, with Apple’’s past successes in human interface creation, I feel pretty optimistic.</p>\n<p>They definitely introduced some cute features to interact with your friends, like sending them a quick sketch or your heart beat.  However,  to me those are more gimmicky features that I would probably use once or twice and then forget about.  The main use case is of course quick glances to get updates and simple info without that insane hassle of pulling your phone all the way out of your pocket.  That’s the problem, $349+ is a lot for what amounts to an extremely small increase in convenience.  Of course, if you don’t have an iPhone 6, the Apple Watch gives you another alternative to take advantage of the very cool Apple Pay, but only time will tell how ubiquitous that will become and thereby determine it’s usefulness.</p>\n<p>The only real immediate functionality gain comes from the health monitoring features.  That’s certainly a huge area and all the sports bracelets, arm cuffs, and advanced heart-rate monitors have shown that there’s a real market there.  Apple looks like they have a pretty solid offering here too.  The altitude monitoring provides an awesome new capability in this type of device, but it will be interesting to see how precise that is.  I was really looking forward to this being waterproof and finally being able to track my swimming, but alas, it’s only water-resistant.  Boo!</p>\n<p>The good news is that even pushing aside all of the smart watch capabilities, the Apple Watch is a damn nice watch.  It looks beautiful, it’s easy to swap out the band and change the look, and it’s crazy accurate.  Being within 50ms of the true time, all the time, makes this an elite timepiece.  It was also great that Apple actually took the time to learn the watch market, something that I think the existing Android watches missed.  The Android watches just didn’t look or feel like great watches, but Apple Watch does and that goes a long way to justifying that high price tag.</p>\n<p>Overall, the device looks pretty cool and seems to have some nice health features that I could see being useful while exercising and tracking daily activity.  Nevertheless, I’m not entirely sold.  For one thing, I’m a bit of a watch-lover, which you might think would make me all the more excited for these smart watches, but in actuality it’s kind of a deterrent.  I have quite a few watches and I don’t really want to be stuck with just one.  Well, fine you say, add it into the rotation and wear it when you want… easy problem to solve.  Sure.  That could work, but there’s some pretty big problems with that.  One, of course, being the health monitoring, which you really want to be as close to 24/7 as possible to get the most out of it.  Then you look at the cost and utility.  An expensive watch that you wear daily is one thing; an expensive watch that you wear once or twice a week is quite another.  Plus, the less you wear it, the less you think about it, and the less you use it.  So not only does the utility go down because you are not wearing it as often, but also when you are wearing it, you’ll probably still reach for the phone since you are not accustomed to looking at your watch for those updates.  I guess the flip side would be annoying too — constantly staring at your regular watch looking for an email update and only getting the time.  The Time!  What the hell kind of watch is that?!</p>\n<p>So, yeah, I’m still on the fence.  I really don’t think the watch is the best device for a wearable.  It’s intuitive because we’ve seen various functionality in watches before like calculators.   The movies have definitely envisioned these types of device for years, making the idea familiar, but to me it’s just not quite right.  I’d rather see a bracelet, or better yet a selection or combination of devices and designs.  I think we’ll see this area evolve a lot in the coming years.  Let’s face it, for health monitoring the ultimate is a device that is In Us, not On Us.  Pop in a little chip, let it monitor our blood for far more deep reaching analysis, combine that with sensors in our shoes, arm cuffs, whatever and suddenly you have a much more robust and comprehensive view of health.  “Hey, Mr. Wearer, please take an aspirin and get to the hospital, you’re about to have a heart attack.  Doctors have already been informed and are expecting you.  Want me to call a cab?”  Nevertheless, the current wearables are a step toward that inevitable future.  I believe Apple Watch just raised the bar a little higher in aesthetic and usability, pushing us a little closer toward the Halo device from Continuum.  Ultimately, whether I buy this watch or not will probably come down to my development work.  I’ve already thought of a health related app that I would like to do for the watch, so if I move forward with it then I will definitely buy one.  As a regular consumer though, I’ll probably wait for at least one more generation and see if they come up with a wearable-only must-have feature that compels me.</p>\n",
    "updatedAt": "2017-01-02T06:57:28.000Z"
  }, {
    "slug": "recognizing-custom-gestures-in-xamarin-forms",
    "title": "Recognizing Custom Gestures in Xamarin Forms",
    "description": "In this post you will learn how you can use custom renderers in order to react to gestures not natively supported in Xamarin Forms.",
    "createdAt": "2015-01-20T00:00:00.000Z",
    "author": "Chris Plowman",
    "tags": "xamarin forms, custom renderers",
    "image": null,
    "body": "<p>Hello again all! Sorry for the delay in my posting activity; things have been a little hectic for me lately. There were, of course, the holidays and all that craziness, but I am also in the process of moving and my wife is pregnant! To top all that off (as if it weren’t enough already), I have actually been working on an Android video tutorial, but my screen capture program was giving me some issues and as soon as I got that worked out, my mic broke! Doh! Anyway, eventually I’ll get that sorted out and have a new video tutorial for you, but in the meantime, here’s a good, old-fashioned, blog post.</p>\n<p>So this post is going to be all about recognizing gestures in Xamarin Forms, which is something that most apps with any sort of interesting user interface are going to have to tackle. Unfortunately, for now the Xamarin team only gives us out-of-the-box support for the tap gesture, which is great, but not enough. So, I have created <a href=\"https://github.com/JC-Chris/Xamarin-Gestures-Demo\">a simple project on GitHub</a> to show how you can listen and respond to your own custom gestures. For the demo I’m using swipes in all directions, but you can follow this same approach to respond to whatever gestures you need to.</p>\n<p>Here are the screenshots of the demo app running on all platforms:\n<img src=\"/Images/ForPosts/XamarinFormsGestures/androidGesture.gif\" alt=\"Android Screenshot\">\n<img src=\"/Images/ForPosts/XamarinFormsGestures/iosGesture.gif\" alt=\"iOS Screenshot\">\n<img src=\"/Images/ForPosts/XamarinFormsGestures/windowsGesture.gif\" alt=\"Windows Phone Screenshot\"></p>\n<p>The magic of this comes from utilizing custom renderers and then leveraging the platform’s native features in each specific project. Figuring out each platform was a little tricky, but thankfully I got some help from <a href=\"http://arteksoftware.com/gesture-recognizers-with-xamarin-forms/\">Rob Gibbens posts</a> as well as <a href=\"https://github.com/tkowalczyk/SimpleCustomGestureFrame\">this GitHub project</a>. Alas, both of those only tackled iOS and Android, so I actually had to do some real work for Window Phone, but thankfully it wasn’t too bad.</p>\n<p>As I mention in the project’s ReadMe, you can extend whatever control makes sense for your implementation, but I used a simple <code>ContentView</code>. It didn’t look like the renderer for this actually created a native component in Windows Phone, so you’ll see I created and injected my own control that I use to listen to the gestures. Otherwise, I think the code should be fairly straightforward, so please take a look at the repo and enjoy!</p>\n<p>Happy Coding!</p>\n",
    "updatedAt": "2017-01-02T02:48:47.000Z"
  }, {
    "slug": "ordering-unit-tests",
    "title": "Ordering NUnit Tests",
    "description": "In this post, Chris shows you how you can run tests in a specified order using NUnit.  While this should not be used for regular unit testing, it is an invaluable technique for your end-to-end testing.",
    "createdAt": "2014-11-19T00:00:00.000Z",
    "author": "Chris Plowman",
    "tags": "Testing, NUnit",
    "image": null,
    "body": "<p>Hello all! In this blog post I’m going to shows how you can create ordered tests in NUnit. Now before you start screaming that unit tests should not have any order dependencies, let me assure you that I know and agree wholeheartedly. So why create this project and bother with showing how to do this? Simple: there are other kinds of tests besides unit tests, and they often DO have order dependencies.</p>\n<p>or example, if you are running database integration tests, a basic CRUD test might look like this:</p>\n<ol>\n<li>Perform initial get and assure empty.</li>\n<li>Add an item.</li>\n<li>Get new item back.</li>\n<li>Delete item.</li>\n<li>Get empty list again.</li>\n</ol>\n<p>Since we want to run this integration all the way through on a real database (hopefully NOT production!), this should be run in order. Without ensuring the order, we would have to do complex, wasteful, and time consuming setup for each step of our tests.</p>\n<p>Of course, we have a couple options for doing this ordered test, including not using a testing framework at all. However, NUnit is a great testing framework that many developers are already very familiar with and are likely using for their actual unit tests, so why not leverage this knowledge to make our lives a little easier? Alas, NUnit has been built for unit tests, so it doesn’t have any built in mechanisms for running tests in order, but with a little ingenuity it can absolutely be accomplished.</p>\n<p>A simple way to run an ordered test would just be to build up one test method with multiple steps and assertions along the way. That might look something like this:</p>\n<pre><code>[TestFixture] \npublic class Test\n{\n    public void LongTest()\n    {\n        // arrange for read\n        // act for read\n        // assert for read\n\n        // arrange for insert\n        // act for insert\n        // assert for insert\n\n        // on and on and on...\n    }\n}\n\n\n</code></pre><p>I have done this in the past for some simple tests like the example above. The nice thing with this approach is that if an assertion fails early on, the test will fail without continuing execution. Often this is exactly what you want with ordered tests since if your preconditions are not met, your later tests may not be valid. However, as your tests become more complicated, this single test becomes long and difficult to work with. Also, if you do want to continue after an initial assertion fails, you can’t. So this is not a great option for real world development on big projects.</p>\n<p>Another option is to prepend an alpha character to your tests. NUnit orders tests alphabetically, so this way you can control the running order. It’s obviously a bit of a hack, can be difficult to maintain, and makes for some ugly method names. The other problem is that it could break at any time if NUnit decides to order their tests differently.</p>\n<p>I recently stumbled across a very cool approach on <a href=\"http://stackoverflow.com/questions/1078658/nunit-test-run-order\">this StackOverflow question</a>.  There are 2 great code samples provided that I have copied into <a href=\"https://github.com/JC-Chris/Ordering-NUnit-Tests\">the project repository for this post</a> to make it easier to view them side by side and test.  Let’s take a quick look at the posted code to see what they are doing.</p>\n<p>The original post, which I have called Example 1 in the repo, uses NUnit’s <code>TestCaseSource</code> in a very clever way to generate the ordered tests. I won’t repost the entire code here since you can see it in the repo and the original SO article, but here’s the main clever bit:</p>\n<pre><code>public IEnumerable&lt;TestCaseData&gt; TestSource\n{\n    get\n    {\n        yield return new TestCaseData(\n            new TestStructure\n            {\n                Test = () =&gt;\n                {\n                    Console.WriteLine(&quot;This is test one&quot;);\n                    MyInt.I++; \n                    Assert.That(MyInt.I, Is.EqualTo(1));\n                }\n            })\n            .SetName(@&quot;Test One&quot;);\n\n        yield return new TestCaseData(\n            new TestStructure\n            {\n                Test = () =&gt;\n                {\n                    Console.WriteLine(&quot;This is test two&quot;);\n                    MyInt.I++; \n                    Assert.That(MyInt.I, Is.EqualTo(2));\n                }\n            }).SetName(@&quot;Test Two&quot;);\n        yield return new TestCaseData(\n            new TestStructure\n            {\n                Test = () =&gt;\n                {\n                    Console.WriteLine(&quot;This is test three&quot;);\n                    MyInt.I++; \n                    Assert.That(MyInt.I, Is.EqualTo(3));\n                }\n            }).SetName(@&quot;Test Three&quot;);\n    }\n}\n\n\n</code></pre><p>Notice that where you would normally be returning data for your test, he’s created a lambda expression that provides the test implementation. The source method then just calls this <code>Test</code> method for each iteration and since test data is always run in the provided order, you can ensure your tests are run the way you want! Super clever approach and kudos to the author.</p>\n<p><img src=\"/Images/ForPosts/OrderedNUnitTests/Example1Run.PNG\" alt=\"Example 1 successfully ordered test run output\"></p>\n<p>The next code block from the answers, which I have called Example 2 in the repo, extends this approach to be a little more developer friendly by utilizing an attribute called <code>OrderedTest</code> that has a single <code>int</code> property to specify the order. This way you can write your test methods as usual and just decorate them with the new attribute to control the order they will run in. Much nicer syntax and I loved the idea. The main bit of code here is again building the list of “data”.</p>\n<pre><code>public IEnumerable&lt;TestCaseData&gt; TestSource\n{\n    get\n    {\n        var assembly =Assembly.GetExecutingAssembly();\n        Dictionary&lt;int, List&lt;MethodInfo&gt;&gt; methods = assembly\n            .GetTypes()\n            .SelectMany(x =&gt; x.GetMethods())\n            .Where(y =&gt; y.GetCustomAttributes().OfType&lt;OrderedTestAttribute&gt;().Any())\n            .GroupBy(z =&gt; z.GetCustomAttribute&lt;OrderedTestAttribute&gt;().Order)\n            .ToDictionary(gdc =&gt; gdc.Key, gdc =&gt; gdc.ToList());\n        foreach (var order in methods.Keys.OrderBy(x =&gt; x))\n        {\n            foreach (var methodInfo in methods[order])\n            {\n                MethodInfo info = methodInfo;\n                yield return new TestCaseData(\n                    new TestStructure\n                        {\n                            Test = () =&gt;\n                                {\n                                    object classInstance = Activator.CreateInstance(info.DeclaringType, null);\n                                    info.Invoke(classInstance, null);\n                                }\n                        }).SetName(methodInfo.Name);\n            }\n        }\n    }\n}\n\n\n</code></pre><p>As you can see, the author uses reflection and his attribute to pull out the test methods. Pretty smart right?! Yeah, I like this approach and it makes for a very clean class. However, there’s a bit of a problem, or at least I viewed it as a problem. His reflection is pulling methods for every class in the assembly, not just the current class. This could end up with you running more tests than you actually thought you were going to. I added in the <code>Example2b</code> class in the repo to show this. The image below shows the output when I run tests for the <code>Example2</code> class. Notice that the 2b tests were run as well, even though they were out of context.</p>\n<p><img src=\"/Images/ForPosts/OrderedNUnitTests/Example2Run.PNG\" alt=\"Example 2 successfully ordered test run output with unintended tests run as well\"></p>\n<p>Finally, for Example 3, I put my own spin on the approach making it even easier to use, at least in my opinion, and resolving the issue of running more tests than you might have intended. By pushing this into its own class, your test class can now inherit from <code>OrderedTestFixture</code> and be a bit cleaner. I also removed the <code>Int</code> class from the code because I felt it was ugly and unnecessary.</p>\n<pre><code>public class OrderedTestFixture\n{\n    public IEnumerable&amp;lt;TestCaseData&amp;gt; TestSource\n    {\n        get\n        {\n            var assembly = Assembly.GetExecutingAssembly();\n            Dictionary&amp;lt;int, List&amp;lt;MethodInfo&amp;gt;&amp;gt; methods = assembly\n                .GetType(this.GetType().FullName)\n                .GetMethods()\n                .Where(y =&amp;gt; y.GetCustomAttributes().OfType&amp;lt;OrderedTestAttribute&amp;gt;().Any())\n                .GroupBy(z =&amp;gt; z.GetCustomAttribute&amp;lt;OrderedTestAttribute&amp;gt;().Order)\n                .ToDictionary(gdc =&amp;gt; gdc.Key, gdc =&amp;gt; gdc.ToList());\n            foreach (var order in methods.Keys.OrderBy(x =&amp;gt; x))\n            {\n                foreach (var methodInfo in methods[order])\n                {\n                    MethodInfo info = methodInfo;\n                    yield return new TestCaseData(\n                        new TestStructure\n                        {\n                            Test = () =&amp;gt;\n                            {\n                                object classInstance = Activator.CreateInstance(info.DeclaringType, null);\n                                info.Invoke(classInstance, null);\n                            }\n                        }).SetName(methodInfo.Name);\n                }\n            }\n        }\n    }\n}\n\n\n</code></pre><p>As you can see in the screenshot below, you can run tests from 3A or 3B and only the corresponding tests will run.</p>\n<p><img src=\"/Images/ForPosts/OrderedNUnitTests/Example3Run.PNG\" alt=\"Example 3 successfully ordered test run\"></p>\n<p><img src=\"/Images/ForPosts/OrderedNUnitTests/Example3bRun.PNG\" alt=\"Example 3B successfully ordered test run\"></p>\n<p>I think this makes for some lovely code and should be pretty easy for you to extend further to fit your needs. For example, you could probably add in some logic to short circuit the tests on an error if you like.</p>\n<p>Hope that helps my fellow devs. Have a look at the repo and have fun testing! Happy coding!</p>\n",
    "updatedAt": "2016-12-25T01:05:25.000Z"
  }, {
    "slug": "sharepoint-2013-install",
    "title": "SharePoint 2013 Farm Install",
    "description": "In this video tutorial, I walk through performing a simple farm installation of SharePoint 2013.",
    "createdAt": "2014-11-09T00:00:00.000Z",
    "author": "Chris Plowman",
    "tags": "SharePoint, SharePoint 2013",
    "image": "/Images/SharePointLogo_Full.PNG <-- Change",
    "body": "<p>In this video tutorial, I walk you through doing a simple farm installation of SharePoint server.  The simple farm consists of one database server and one SharePoint server that hosts all the SharePoint roles. This is the smallest installation footprint that is appropriate for production use, but can easily be scaled out to a much larger installation. This is a great way to setup an environment for testing and development.</p>\n<iframe width=\"560\" height=\"315\" src=\"//www.youtube.com/embed/k0WAWn8AkPg\" frameborder=\"0\" allowfullscreen></iframe>",
    "updatedAt": "2016-12-23T02:04:45.000Z"
  }, {
    "slug": "xamarin-recertification",
    "title": "Renewing my Xamarin Certification",
    "description": "Musings on my troubled experience when renewing my Xamarin certification.",
    "createdAt": "2014-10-27T00:00:00.000Z",
    "author": "Chris Plowman",
    "tags": "general, xamarin",
    "image": null,
    "body": "<p>So just over a month ago I renewed my Xamarin certification and I’m finally finding some time to put my experience down for the benefit and possibly humor of others.  Let’s set the stage…</p>\n<p>I was in Indiana visiting with family and lending some support for my grandma who was about to go in for back surgery.  I had decided that while I was there and had some downtime from work, it would be the perfect time to knock out my Xamarin certification.  The certification that I had gotten from Evolve 2013 was about to expire and I had already taken all the required courses, so I just needed to sit for the actual exam.</p>\n<p>One day it so happened that I was going to have a few hours to myself while the rest of the family had some errands to run.  It was the perfect opportunity so as soon as they left I did a quick review of the coursework and started in on the exam, all 150 questions and 3 hours of it.  I had some experience with Xamarin before the classes and felt I had a pretty strong knowledge of everything that we’d covered, so I was sure I would finish well before the time.</p>\n<p>My strategy going in was to do a quick first pass of the exam, knocking out all the super easy questions and then settle in and work through all the remaining items that required actual brain power.  The first question came up and since I didn’t immediately know the answer, I skipped it.  Then the second, same thing.  Third.  Forth.  Fifth.  Holy crap, did I suddenly become a moron?!  I re-read the question I was on.  Nope.  These questions really are tough!  Ok, my approach is going down in a flaming ball of ruin…</p>\n<p>Pause.  Ok, self, looks like this isn’t going to be the walk in the park I had expected.  Regroup and let’s shake the cobwebs off that old brain.</p>\n<p>Return to question 1.  Read, think, eliminate options, answer, continue.  On and on.  I had some water, I had eaten breakfast — all would be fine.  And it was for the next hour and half or so.  I had gotten through a little more than half the test in half the time.  It was looking like I would be able to finish with some time to spare, but not with the hour or more I had expected.  I had to take a short break to pee and grab a handful of nuts to eat, hoping that would ease the pit in my stomach.</p>\n<p>Back to the test and things went ok for the next 30 minutes or so, but the pit in my stomach was growing more restless and unpleasant.  And then, suddenly, my stomach cramped and I made a beeline to the bathroom.  Apparently either something from breakfast had not agreed with me, or the nerves from this gnarly test were eating a hole in my stomach. Not nice!!  Fortunately, after about 15 minutes I was ready to return to my test.  I’d probably lost my buffer, but I should still be able to finish in time easily enough.</p>\n<p>…and then I flushed the toilet.</p>\n<p>And, of course, it started filling up rather than going down.</p>\n<p>(Insert your preferred expletive here…)</p>\n<p>Now clogged toilets always suck, but at least at home you know where everything is.  At grandma’s house, I had no clue where the plunger might be.  Fortunately, just then she got home and told me where her plunger was.  It wasn’t too much of a job, but I’d still probably blown another 10 minutes getting the toilet unclogged, not to mention that’s something of a break to your concentration.  At least it didn’t overflow completely, disgusting!</p>\n<p>I rushed back to my laptop and the exam.  I had just under 30 minutes left and around 50 questions.  I tried to calm down, I didn’t have the time to be rattled and make careless mistakes.  So I worked as quickly as I could while still being fairly certain of my answers. The last 10 questions were pretty much full sprint, but I finished.</p>\n<p>Time was up.  Moment of truth.  Submit.</p>\n<p>90%</p>\n<p>~~ Xamarin Certificate Image ~~</p>\n<p>Phew!  That was the minimum score that I wanted, but at least I had passed and with the ordeal it had been, I was plenty happy with that.</p>\n<p>So to any of you who might be looking to take your certification, let me recommend that you take it seriously.  It’s hard!  Also, all that additional reading from the courses — read it.  There were plenty of things on the test that weren’t directly covered in the courses and were in that additional material.  Make sure you’ve planned your meals and have some water available because 3 hours is a long time.  And of course, know where the plunger is ahead of time!  ;)</p>\n",
    "updatedAt": "2016-12-23T01:37:11.000Z"
  }]
}